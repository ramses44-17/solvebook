<CardContent className="p-6">
          <Dialog>
            <DialogTrigger asChild>
              <Button className="w-full mb-6 bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white font-semibold py-2 px-4 rounded-lg transition duration-300 ease-in-out transform hover:scale-105">
                Créer un problème
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>Ajouter un nouveau problème</DialogTitle>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid gap-2">
                  <Label htmlFor="title">Titre</Label>
                  <Input
                    id="title"
                    value={newProblem.title}
                    onChange={(e) => setNewProblem(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="Titre du problème"
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="content">Description</Label>
                  <Input
                    id="content"
                    value={newProblem.content}
                    onChange={(e) => setNewProblem(prev => ({ ...prev, content: e.target.value }))}
                    placeholder="Décrivez le problème ici"
                  />
                </div>
              </div>
              <Button onClick={addProblem} className="w-full">Ajouter le problème</Button>
            </DialogContent>
          </Dialog>

          <div className="grid gap-6">
            {niche.problems.map((problem) => (
              <Card key={problem.id} className="bg-white shadow-sm hover:shadow-md transition-shadow duration-300">
                <CardHeader>
                  <CardTitle className="text-xl font-semibold text-gray-800">{problem.title}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-gray-600 mb-4">{problem.content}</p>
                  <div className="flex items-center space-x-4 text-sm text-gray-500">
                    <Button variant="ghost" size="sm" className="flex items-center space-x-1">
                      <ThumbsUp className="w-4 h-4" />
                      <span>{problem.likes}</span>
                    </Button>
                    <Button variant="ghost" size="sm" className="flex items-center space-x-1">
                      <MessageCircle className="w-4 h-4" />
                      <span>{problem.comments}</span>
                    </Button>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </CardContent>














        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="email"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Email</FormLabel>
                  <FormControl>
                    <Input placeholder="Enter your email" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <Button type="submit" className="w-full" disabled={isLoading}>
              {!isLoading ? "Login with email" : <Loader size="small"/>}
            </Button>
          </form>
        </Form>